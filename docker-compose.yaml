version: '3.9'
services:
  hasura-engine:
    container_name: hasura_engine
    image: hasura/graphql-engine:v2.15.2
    ports:
      - '8080:8080'
    depends_on:
      db:
        condition: service_healthy
      prisma-db:
        condition: service_healthy
    env_file:
      - .env.local
    environment:
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false'
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_TELEMETRY: 'false'
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "RS256","key": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlE9g9dr5yaq89gr4lnZ1\nyRb2DKisPhrVmAvVPTcXkFrOzQzJvuIVdnyojTxLOTokqP1tdijb72wPUWQaxuBu\nimIoQAQ2l1z/ovNLgzPQh/c2g8rC3Sq3O4sVgdZSErGGtKviHc++a3V/ZHJ45qJg\nrWposj05q8SHQufP6L6N+xu1wwi8CP9LxJh1gp/RnabPggPMRj09wV6unqcMuK/o\nhL6ycfgeTmVGlcCvULN/tncHw34sGnOBE3kQfghR0KRFGR2PwO4GnIknBebul0W7\n+hrUtlyi2fzP5WUn6n88BLu/2cd99sxOkbG9Gk8TMKb30vOb45ut7CWvt7oFfHow\n7wIDAQAB\n-----END PUBLIC KEY-----\n", "header": {"type": "Cookie", "name": "next-auth.session-token" }, "claims_map": { "x-hasura-allowed-roles": ["user", "anonymous" ], "x-hasura-default-role": "user", "x-hasura-client-id": { "path": "$$.clientId", "default": "" }, "x-hasura-user-id": { "path": "$$.user.id", "default": "" }, "x-hasura-role": { "path": "$$.role", "default": "" }, "x-hasura-username": { "path": "$$.name", "default": "" } } }'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'apt-get update -y && apt-get install -y curl && curl --fail http://localhost:8080/healthz || exit 1',
        ]
      interval: 5s
      timeout: 3s
      retries: 30
    networks:
      - web
      - db
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=web'
      - 'traefik.http.routers.hasura-engine.rule=Host(`hasura-engine.postgres.test`)'
    restart: unless-stopped
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  hasura-console:
    container_name: hasura-console
    image: sebpalluel/hasura_cli_with_socat_and_curl:latest
    # build:
    #   context: ./hasura
    #   dockerfile: Dockerfile
    volumes:
      - ./hasura:/usr/src/hasura
    env_file:
      - .env.local
    environment:
      HASURA_GRAPHQL_ADDRESS: 127.0.0.1
      HASURA_RUN_CONSOLE: 'true'
    ports:
      - '9695:9695'
      - '9693:9693'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - web
      - db
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=web'
      - 'traefik.http.services.hasura-console.loadbalancer.server.port=9695'
      - 'traefik.http.routers.hasura-console.rule=Host(`hasura-console.postgres.test`)'
    depends_on:
      db:
        condition: service_healthy
      prisma-db:
        condition: service_healthy
    command: './start.sh'
    # tty: true
    restart: unless-stopped

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog
    logging:
      driver: 'none' # disable saving logs
    ports:
      - '1025:1025' # smtp server
      - '8025:8025' # mailcatcher web interface
    networks:
      - web
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      - .env.local
    restart: on-failure
  db:
    container_name: db
    image: postgres:13
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - db
    restart: unless-stopped
    env_file:
      - .env.local
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 2s
      timeout: 2s
      retries: 10
    extra_hosts:
      - 'host.docker.internal:host-gateway'
  prisma-db:
    container_name: prisma_db
    image: postgres:13
    volumes:
      - prisma_db_data:/var/lib/postgresql/data
    ports:
      - '$PRISMA_DB_PORT:5432'
    networks:
      - db
    restart: unless-stopped
    env_file:
      - .env.local
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 2s
      timeout: 2s
      retries: 10
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  redis: # Name of container
    image: redis
    env_file:
      - .env.local
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis:/data
    restart: unless-stopped
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  # # Used to have same DNS in docker and on the host machine but unfortunately it doesn't work on Mac
  # dps:
  #   image: defreitas/dns-proxy-server
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /etc/resolv.conf:/etc/resolv.conf
  #   environment:
  #     - MG_LOG_LEVEL=ERROR
  #   hostname: dns.mageddo
  #   networks:
  #     dps:
  #       ipv4_address: 172.0.0.10

volumes:
  db_data:
  prisma_db_data:
  redis:
    driver: local

networks:
  web:
    driver: bridge
  db:
    driver: bridge
