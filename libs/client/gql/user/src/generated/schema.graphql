schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  refresh the cache entry
  """
  refresh: Boolean! = false

  """
  measured in seconds
  """
  ttl: Int! = 60
) on QUERY

type BalanceTokenData {
  address: String
  balanceUsd: Float
  decimals: Int
  name: String
  symbol: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

"""
columns and relationships of "Wallet"
"""
type Wallet {
  address: String!
  balanceUsd: float8!
  createdAt: timestamp!
  id: String!
  name: String
  network: String!
  updatedAt: timestamp!
}

"""
Boolean expression to filter rows from the table "Wallet". All fields are combined with a logical 'AND'.
"""
input Wallet_bool_exp {
  _and: [Wallet_bool_exp!]
  _not: Wallet_bool_exp
  _or: [Wallet_bool_exp!]
  address: String_comparison_exp
  balanceUsd: float8_comparison_exp
  createdAt: timestamp_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  network: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
Ordering options when selecting data from "Wallet".
"""
input Wallet_order_by {
  address: order_by
  balanceUsd: order_by
  createdAt: order_by
  id: order_by
  name: order_by
  network: order_by
  updatedAt: order_by
}

"""
select columns of table "Wallet"
"""
enum Wallet_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  balanceUsd

  """
  column name
  """
  createdAt

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  network

  """
  column name
  """
  updatedAt
}

"""
Streaming cursor of the table "Wallet"
"""
input Wallet_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: Wallet_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input Wallet_stream_cursor_value_input {
  address: String
  balanceUsd: float8
  createdAt: timestamp
  id: String
  name: String
  network: String
  updatedAt: timestamp
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
mutation root
"""
type mutation_root {
  """
  delete data from the table: "users"
  """
  delete_users(
    """
    filter the rows which have to be deleted
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: String!): users

  """
  update data of the table: "users"
  """
  update_users(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input

    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """
    updates to execute, in order
    """
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "Wallet"
  """
  Wallet(
    """
    distinct select on columns
    """
    distinct_on: [Wallet_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [Wallet_order_by!]

    """
    filter the rows returned
    """
    where: Wallet_bool_exp
  ): [Wallet!]!

  """
  fetch data from the table: "Wallet" using primary key columns
  """
  Wallet_by_pk(id: String!): Wallet

  """
  Get balances of token for an address in given network
  """
  balancesEIP377(address: String!, network: String!): [BalanceTokenData]

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: String!): users
}

type subscription_root {
  """
  fetch data from the table: "Wallet"
  """
  Wallet(
    """
    distinct select on columns
    """
    distinct_on: [Wallet_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [Wallet_order_by!]

    """
    filter the rows returned
    """
    where: Wallet_bool_exp
  ): [Wallet!]!

  """
  fetch data from the table: "Wallet" using primary key columns
  """
  Wallet_by_pk(id: String!): Wallet

  """
  fetch data from the table in a streaming manner : "Wallet"
  """
  Wallet_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [Wallet_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: Wallet_bool_exp
  ): [Wallet!]!

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: String!): users

  """
  fetch data from the table in a streaming manner : "users"
  """
  users_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [users_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "users"
"""
type users {
  email: String
  emailVerified: timestamp
  firstName: String
  id: String!
  image: String
  lastName: String
  name: String
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  email: String_comparison_exp
  emailVerified: timestamp_comparison_exp
  firstName: String_comparison_exp
  id: String_comparison_exp
  image: String_comparison_exp
  lastName: String_comparison_exp
  name: String_comparison_exp
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [users!]!
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
  email: order_by
  emailVerified: order_by
  firstName: order_by
  id: order_by
  image: order_by
  lastName: order_by
  name: order_by
}

"""
primary key columns input for table: users
"""
input users_pk_columns_input {
  id: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  email

  """
  column name
  """
  emailVerified

  """
  column name
  """
  firstName

  """
  column name
  """
  id

  """
  column name
  """
  image

  """
  column name
  """
  lastName

  """
  column name
  """
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  email: String
  emailVerified: timestamp
  id: String
  image: String
  name: String
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: users_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input users_stream_cursor_value_input {
  email: String
  emailVerified: timestamp
  firstName: String
  id: String
  image: String
  lastName: String
  name: String
}

input users_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: users_set_input
  where: users_bool_exp!
}
