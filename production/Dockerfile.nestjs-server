FROM node:18-alpine as deps

## set global npm path to node user to avoid permission error when installing global packages (pnpm)
ENV NPM_CONFIG_PREFIX=/home/node/.npm-global
ENV PATH=$PATH:/home/node/.npm-global/bin

USER node
WORKDIR /home/node

COPY --chown=node package.json pnpm-lock.yaml ./
RUN npm install -g pnpm && pnpm install --ignore-scripts

FROM node:18-alpine as builder

## avoid nx build error because don't detect it's a ci environment
ENV NX_DAEMON=false
## trick to pass down PRISMA_DATABASE_URL to avoid prisma error when running prisma migration
ARG PRISMA_DATABASE_URL
ENV PRISMA_DATABASE_URL ${PRISMA_DATABASE_URL}
## 
ENV NODE_ENV build
ENV NPM_CONFIG_PREFIX=/home/node/.npm-global
ENV PATH=$PATH:/home/node/.npm-global/bin

## add openssl and libssl1.1 for prisma (doesn't work yet on ARM, M1 etc), see https://github.com/prisma/prisma/issues/15598
RUN apk upgrade --update-cache --available && \
	apk add openssl=3.0.8-r0 libssl1.1 && \
	rm -rf /var/cache/apk/*

USER node
WORKDIR /home/node

COPY --from=deps /home/node/.npm-global/ /home/node/.npm-global/
COPY --chown=node --from=deps /home/node/node_modules/ /home/node/node_modules/

COPY --chown=node . .

## here we generate the prisma client + apply migrations + build the nestjs server. Finally we strip the dev dependencies.
RUN pnpm prisma generate && pnpm prisma migrate deploy && pnpm nx run nestjs-server:build --prod && pnpm prune --prod

FROM node:18-alpine as production

ENV NODE_ENV production

USER node
WORKDIR /home/node

## Copy openssl and libssl1.1 from builder stage
COPY --from=builder /usr/bin/openssl /usr/bin/openssl
COPY --from=builder /usr/lib/libssl.so.1.1 /usr/lib/libssl.so.1.1
COPY --from=builder /usr/lib/libcrypto.so.1.1 /usr/lib/libcrypto.so.1.1
#
COPY --from=builder /home/node/package*.json /home/node/
COPY --from=builder /home/node/node_modules/ /home/node/node_modules/
COPY --from=builder /home/node/dist/ /home/node/dist/

EXPOSE 3000

CMD ["node", "dist/apps/nestjs-server/main.js"]
